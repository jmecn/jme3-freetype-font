package io.github.jmecn.tools;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

public class GenEmojiTable {

    public static final String EMOJI_DATA_FILE = "docs/emoji/emoji-data.txt";

    public static void main(String[] args) {
        String fileName = EMOJI_DATA_FILE;
        BufferedReader reader;
        Map<String, List<int[]>> ranges = new TreeMap<>();

        List<String> headers = new ArrayList<>(10);

        try {
            reader = new BufferedReader(new FileReader(fileName));
            for (int i = 0; i < 10; i++) {
                headers.add(reader.readLine().trim());
            }
            String line;
            while ((line = reader.readLine()) != null) {
                line = line.trim();
                if (line.isEmpty() || line.charAt(0) == '#') {
                    continue;
                }
                String[] parts = line.split("#")[0].split(";");
                String rangeStr = parts[0].trim();
                String type = parts[1].trim();

                String[] range = rangeStr.split("\\.\\.");
                int start;
                int end;
                if (range.length > 1) {
                    start = Integer.parseInt(range[0], 16);
                    end = Integer.parseInt(range[1], 16);
                } else {
                    start = end = Integer.parseInt(range[0], 16);
                }

                if (!ranges.containsKey(type)) {
                    ranges.put(type, new ArrayList<>());
                }
                List<int[]> typeRanges = ranges.get(type);
                if (!typeRanges.isEmpty()) {
                    int[] lastRange = typeRanges.get(typeRanges.size() - 1);
                    if (lastRange[1] == start - 1) {
                        lastRange[1] = end;
                    } else {
                        typeRanges.add(new int[]{start, end});
                    }
                } else {
                    typeRanges.add(new int[]{start, end});
                }
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }

        // Print Java code
        System.out.println("package io.github.jmecn.text;");
        System.out.println("/* == Start of generated table == */");
        System.out.println("/*");
        System.out.println(" * The following tables are generated by running: GenEmojiTable");
        System.out.println(" *");
        System.out.println(" * on file with this header:");
        System.out.println(" *");
        for (String header : headers) {
            System.out.println(" * " + header);
        }
        System.out.println(" */");
        System.out.println();
        System.out.println("public final class EmojiTable {");
        System.out.println("    private EmojiTable() {}");
        System.out.println();
        System.out.println("    public static final int[][] EMOJI_TABLE = {");
        System.out.println(toHexString(ranges, "Emoji"));
        System.out.println("    };");
        System.out.println();
        System.out.println("    public static final int[][] EMOJI_PRESENTATION_TABLE = {");
        System.out.println(toHexString(ranges, "Emoji_Presentation"));
        System.out.println("    };");
        System.out.println();
        System.out.println("    public static final int[][] EMOJI_MODIFIER_TABLE = {");
        System.out.println(toHexString(ranges, "Emoji_Modifier"));
        System.out.println("    };");
        System.out.println();
        System.out.println("    public static final int[][] EMOJI_MODIFIER_BASE_TABLE = {");
        System.out.println(toHexString(ranges, "Emoji_Modifier_Base"));
        System.out.println("    };");
        System.out.println();
        System.out.println("    public static final int[][] EXTENDED_PICTOGRAPHIC_TABLE = {");
        System.out.println(toHexString(ranges,"Extended_Pictographic"));
        System.out.println("    };");
        System.out.println();
        System.out.println("}");
        System.out.println();
        System.out.println("/* == End of generated table == */");
    }

    private static String toHexString(Map<String, List<int[]>> ranges, String type) {
        List<int[]> list = ranges.getOrDefault(type, new ArrayList<>());
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < list.size(); i++) {
            int[] range = list.get(i);
            int start = range[0];
            int end = range[1];
            sb.append("        {0x").append(Integer.toHexString(start).toUpperCase()).append(", 0x").append(Integer.toHexString(end).toUpperCase()).append("},");
            if (i < list.size() - 1) {
                sb.append("\n");
            }
        }
        return sb.toString();
    }
}